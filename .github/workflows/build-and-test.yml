name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }} ${{ github.event_name == 'pull_request' && 'pull_request' || format('push-{0}', github.ref_name) }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  detect-changes:
    name: Detect Changed Files
    runs-on: ubuntu-latest
    outputs:
      all: ${{ steps.changes.outputs.all }}
      ci: ${{ steps.changes.outputs.ci }}
      src: ${{ steps.changes.outputs.src }}
      docs: ${{ steps.changes.outputs.docs }}
      linters: ${{ steps.changes.outputs.linters }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Detect changed files
        id: changes
        uses: ./.github/actions/changed-files
        with:
          filters: |
            src:
              - 'CMakeLists.txt'
              - 'cmake/**'
              - 'src/**'
              - 'tests/**'
            docs:
              - '**.md'
              - 'docs/**'
              - 'README*'
              - 'LICENSE*'
            linters:
              - '.clang-tidy'
              - '.cppcheck'
              - '.iwyu*'

  build-and-test:
    name: Build (${{ matrix.libcxx && format('{0}, {1}', matrix.compiler, matrix.libcxx) || matrix.compiler }})
    needs: detect-changes
    if: needs.detect-changes.outputs.src == 'true'
    runs-on: ubuntu-latest
    env:
      CMAKE_GENERATOR: Ninja
    strategy:
      fail-fast: false
      matrix:
        include:
          - compiler: gcc
          - compiler: clang
            libcxx: libstdc++
          - compiler: clang
            libcxx: libc++
    steps:
      - name: Checkout code into source directory
        uses: actions/checkout@v2
        with:
          path: source

      - name: Install dependencies
        run: sudo apt-get install -y build-essential cmake ninja-build

      - name: Install libc++ if needed
        if: matrix.libcxx == 'libc++'
        run: sudo apt-get install -y libc++-dev libc++abi-dev

      - name: Configure
        env:
          CC: ${{ matrix.compiler == 'gcc' && 'gcc' || 'clang' }}
          CXX: ${{ matrix.compiler == 'gcc' && 'g++' || 'clang++' }}
          CXXFLAGS: ${{ matrix.libcxx && format('-stdlib={0}', matrix.libcxx) }}
        run: |
          cmake -S source -B build

      - name: Build
        run: |
          cmake --build build

      - name: Test
        run: |
          ctest --test-dir build --output-on-failure

  linters:
    name: Linter (${{ matrix.tool }})
    needs: detect-changes
    if: needs.detect-changes.outputs.src == 'true' || needs.detect-changes.outputs.linters == 'true'
    runs-on: ubuntu-latest
    env:
      CMAKE_GENERATOR: Ninja
      CC: clang
      CXX: clang++
    strategy:
      fail-fast: false
      matrix:
        tool: [cppcheck, clang-tidy, include-what-you-use]

    steps:
      - name: Checkout code into source directory
        uses: actions/checkout@v2
        with:
          path: source

      - name: Install dependencies
        run: |
          if [ "${{ matrix.tool }}" == "cppcheck" ]; then
            linter_pkg=cppcheck
          elif [ "${{ matrix.tool }}" == "clang-tidy" ]; then
            linter_pkg=clang-tidy
          elif [ "${{ matrix.tool }}" == "include-what-you-use" ]; then
            linter_pkg=iwyu
          fi

          sudo apt-get install -y \
              build-essential cmake clang ninja-build ${linter_pkg}

      - name: Configure with linters enabled
        run: |
          linter_args=()
          if [ "${{ matrix.linter }}" == "cppcheck" ]; then
            linter_args+=( -DCLANG_TIDY_EXECUTABLE=IGNORE )
            linter_args+=( -DINCLUDE_WHAT_YOU_USE_EXECUTABLE=IGNORE )
          elif [ "${{ matrix.linter }}" == "clang-tidy" ]; then
            linter_args+=( -DCPPCHECK_EXECUTABLE=IGNORE )
            linter_args+=( -DINCLUDE_WHAT_YOU_USE_EXECUTABLE=IGNORE )
          elif [ "${{ matrix.linter }}" == "include-what-you-use" ]; then
            linter_args+=( -DCPPCHECK_EXECUTABLE=IGNORE )
            linter_args+=( -DCLANG_TIDY_EXECUTABLE=IGNORE )
          fi

          cmake \
            -S source \
            -B build \
            -DAUTOCOMPAT_ENABLE_LINTERS=ON \
            "${linter_args[@]}"

      - name: Build
        run: |
          cmake --build build
