macro(check_and_set ENV_VAR CMAKE_VAR)
    if (NOT DEFINED ENV{${ENV_VAR}} )
        message(FATAL_ERROR "${ENV_VAR} is not defined")
    endif()
    if ("$ENV{${ENV_VAR}}" STREQUAL "")
        message(FATAL_ERROR "${ENV_VAR} is defined but empty")
    endif()
    set(${CMAKE_VAR} "$ENV{${ENV_VAR}}")
endmacro()

if (NOT CTEST_BUILD_CONFIGURATION)
    set(CTEST_BUILD_CONFIGURATION Debug)
endif()

if (NOT dashboard_model)
    set(dashboard_model Experimental)
endif()

if (NOT dashboard_binary_name)
    set(dashboard_binary_name "build")
endif()

if (NOT dashboard_track)
    set(dashboard_track "Continuous Integration")
endif()

find_program(CTEST_GIT_COMMAND git)
if (DEFINED ENV{CI_COMMIT_REF})
    set(dashboard_git_branch "$ENV{CI_COMMIT_REF}")
    set(CTEST_UPDATE_VERSION_ONLY ON)
endif()

check_and_set(CI_SITE_NAME CTEST_SITE)
check_and_set(CI_BUILD_NAME CTEST_BUILD_NAME)
check_and_set(CI_ROOT_DIR CTEST_DASHBOARD_ROOT)
check_and_set(CI_SOURCE_DIR CTEST_SOURCE_DIRECTORY)
check_and_set(CI_BUILD_DIR CTEST_BINARY_DIRECTORY)
if (DEFINED ENV{CMAKE_GENERATOR})
    set(CTEST_CMAKE_GENERATOR "$ENV{CMAKE_GENERATOR}")
endif()

list(APPEND CTEST_UPDATE_NOTES_FILES "${CMAKE_CURRENT_LIST_FILE}")
set(CTEST_UPDATE_COMMAND ${CTEST_GIT_COMMAND})
set(CTEST_UPTATE_TYPE git)
set(CTEST_UPDATE_VERSION_ONLY TRUE)
include(${CMAKE_CURRENT_LIST_DIR}/autocompat_common.cmake)
if (ctest_build_num_warnings GREATER 0)
    message(FATAL_ERROR "Found ${ctest_build_num_warnings} warnings.")
endif()
